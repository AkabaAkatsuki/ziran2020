#include <MPM/MpmParticleHandleBase.cpp>
namespace ZIRAN {
template class MpmParticleHandleBase<float, 3>;
extern template class MpmForceBase<float, 3>;
template void MpmParticleHandleBase<float, 3>::addFJMixedMpmForce<NeoHookeanIsotropic<float, 3>, QuadraticVolumePenalty<float, 3>>(NeoHookeanIsotropic<float, 3> const&, QuadraticVolumePenalty<float, 3> const&, MATERIAL_PHASE_ENUM, MATERIAL_PROPERTY_ENUM, bool);
template void MpmParticleHandleBase<float, 3>::addFJMixedMpmForce<StvkWithHenckyIsotropic<float, 3>, QuadraticVolumePenalty<float, 3>>(StvkWithHenckyIsotropic<float, 3> const&, QuadraticVolumePenalty<float, 3> const&, MATERIAL_PHASE_ENUM, MATERIAL_PROPERTY_ENUM, bool);
template void MpmParticleHandleBase<float, 3>::addFJMixedMpmForce<CorotatedElasticity<float, 3>, QuadraticVolumePenalty<float, 3>>(CorotatedElasticity<float, 3> const&, QuadraticVolumePenalty<float, 3> const&, MATERIAL_PHASE_ENUM, MATERIAL_PROPERTY_ENUM, bool);
template void MpmParticleHandleBase<float, 3>::addFJMixedMpmForce<CorotatedIsotropic<float, 3>, QuadraticVolumePenalty<float, 3>>(CorotatedIsotropic<float, 3> const&, QuadraticVolumePenalty<float, 3> const&, MATERIAL_PHASE_ENUM, MATERIAL_PROPERTY_ENUM, bool);
template void MpmParticleHandleBase<float, 3>::addFJMixedMpmForce<LinearCorotated<float, 3>, QuadraticVolumePenalty<float, 3>>(LinearCorotated<float, 3> const&, QuadraticVolumePenalty<float, 3> const&, MATERIAL_PHASE_ENUM, MATERIAL_PROPERTY_ENUM, bool);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForceWithAnisotropicPhaseField<NeoHookeanBorden<float, 3>>(const StdVector<Vector<float, 3>>, const StdVector<float>, const float&, const float&, NeoHookeanBorden<float, 3> const&, const float, const float, bool, const float);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForceWithAnisotropicPhaseField<QRAnisotropic<float, 3>>(const StdVector<Vector<float, 3>>, const StdVector<float>, const float&, const float&, QRAnisotropic<float, 3> const&, const float, const float, bool, const float);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForceWithAnisotropicPhaseField<QRStableNeoHookean<float, 3>>(const StdVector<Vector<float, 3>>, const StdVector<float>, const float&, const float&, QRStableNeoHookean<float, 3> const&, const float, const float, bool, const float);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForceWithPhaseField<NeoHookeanBorden<float, 3>>(const float&, const float&, NeoHookeanBorden<float, 3> const&, bool, const float);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForce<CorotatedElasticity<float, 3>>(CorotatedElasticity<float, 3> const&);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForce<CorotatedIsotropic<float, 3>>(CorotatedIsotropic<float, 3> const&);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForce<QRAnisotropic<float, 3>>(QRAnisotropic<float, 3> const&);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForce<QRStableNeoHookean<float, 3>>(QRStableNeoHookean<float, 3> const&);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForce<CotangentOrthotropic<float, 3>>(CotangentOrthotropic<float, 3> const&);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForce<LinearElasticity<float, 3>>(LinearElasticity<float, 3> const&);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForce<LinearCorotated<float, 3>>(LinearCorotated<float, 3> const&);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForce<NeoHookean<float, 3>>(NeoHookean<float, 3> const&);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForce<NeoHookeanBorden<float, 3>>(NeoHookeanBorden<float, 3> const&);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForce<NeoHookeanIsotropic<float, 3>>(NeoHookeanIsotropic<float, 3> const&);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForce<StVenantKirchhoff<float, 3>>(StVenantKirchhoff<float, 3> const&);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForce<StvkWithHencky<float, 3>>(StvkWithHencky<float, 3> const&);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForce<StvkWithHenckyDecoupled<float, 3>>(StvkWithHenckyDecoupled<float, 3> const&);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForce<StvkWithHenckyIsotropic<float, 3>>(StvkWithHenckyIsotropic<float, 3> const&);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForce<Smudge<float, 3>>(Smudge<float, 3> const&);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForce<StvkWithHenckyIsotropicUnilateral<float, 3>>(StvkWithHenckyIsotropicUnilateral<float, 3> const&);
template void MpmParticleHandleBase<float, 3>::addFBasedMpmForce<SurfaceTension<float, 3>>(SurfaceTension<float, 3> const&);
template void MpmParticleHandleBase<float, 3>::addFDecoupledBasedMpmForce<StvkWithHenckyDecoupled<float, 3>>(StvkWithHenckyDecoupled<float, 3> const&, float);
template void MpmParticleHandleBase<float, 3>::addFElasticNonequilibratedBasedMpmForce<StvkWithHencky<float, 3>>(StvkWithHencky<float, 3> const&, float, float);
template void MpmParticleHandleBase<float, 3>::addJBasedMpmForce<EquationOfState<float, 3>>(EquationOfState<float, 3> const&);
template void MpmParticleHandleBase<float, 3>::addPlasticity<CorotatedIsotropic<float, 3>, SnowPlasticity<float>>(CorotatedIsotropic<float, 3> const&, SnowPlasticity<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<CorotatedElasticity<float, 3>, SnowPlasticity<float>>(CorotatedElasticity<float, 3> const&, SnowPlasticity<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<LinearCorotated<float, 3>, SnowPlasticity<float>>(LinearCorotated<float, 3> const&, SnowPlasticity<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<StvkWithHencky<float, 3>, ModifiedCamClay<float>>(StvkWithHencky<float, 3> const&, ModifiedCamClay<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<StvkWithHenckyIsotropic<float, 3>, ModifiedCamClay<float>>(StvkWithHenckyIsotropic<float, 3> const&, ModifiedCamClay<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<EquationOfState<float, 3>, UnilateralJ<float>>(EquationOfState<float, 3> const&, UnilateralJ<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<NeoHookean<float, 3>, SnowPlasticity<float>>(NeoHookean<float, 3> const&, SnowPlasticity<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<NeoHookeanBorden<float, 3>, NonAssociativeCamClay<float>>(NeoHookeanBorden<float, 3> const&, NonAssociativeCamClay<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<NeoHookeanBorden<float, 3>, NonAssociativeVonMises<float>>(NeoHookeanBorden<float, 3> const&, NonAssociativeVonMises<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<NeoHookeanBorden<float, 3>, NonAssociativeDruckerPrager<float>>(NeoHookeanBorden<float, 3> const&, NonAssociativeDruckerPrager<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<StvkWithHencky<float, 3>, DruckerPragerStvkHencky<float>>(StvkWithHencky<float, 3> const&, DruckerPragerStvkHencky<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<StvkWithHencky<float, 3>, DruckerPragerStrainSoftening<float>>(StvkWithHencky<float, 3> const&, DruckerPragerStrainSoftening<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<StvkWithHencky<float, 3>, VonMisesStvkHencky<float, 3>>(StvkWithHencky<float, 3> const&, VonMisesStvkHencky<float, 3> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<QRStableNeoHookean<float, 3>, VonMisesStvkHencky<float, 3>>(QRStableNeoHookean<float, 3> const&, VonMisesStvkHencky<float, 3> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<StvkWithHencky<float, 3>, VonMisesCapped<float>>(StvkWithHencky<float, 3> const&, VonMisesCapped<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<StvkWithHenckyDecoupled<float, 3>, DruckerPragerStvkHencky<float>>(StvkWithHenckyDecoupled<float, 3> const&, DruckerPragerStvkHencky<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<StvkWithHenckyIsotropic<float, 3>, DruckerPragerStvkHencky<float>>(StvkWithHenckyIsotropic<float, 3> const&, DruckerPragerStvkHencky<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<Smudge<float, 3>, DruckerPragerStvkHencky<float>>(Smudge<float, 3> const&, DruckerPragerStvkHencky<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<Smudge<float, 3>, SmudgePlasticity<float>>(Smudge<float, 3> const&, SmudgePlasticity<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<StvkWithHenckyIsotropic<float, 3>, SmudgePlasticity<float>>(StvkWithHenckyIsotropic<float, 3> const&, SmudgePlasticity<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<StvkWithHenckyIsotropic<float, 3>, DruckerPragerStrainSoftening<float>>(StvkWithHenckyIsotropic<float, 3> const&, DruckerPragerStrainSoftening<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<StvkWithHenckyIsotropic<float, 3>, VonMisesStvkHencky<float, 3>>(StvkWithHenckyIsotropic<float, 3> const&, VonMisesStvkHencky<float, 3> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<StvkWithHenckyIsotropic<float, 3>, VonMisesCapped<float>>(StvkWithHenckyIsotropic<float, 3> const&, VonMisesCapped<float> const&, std::string);
template void MpmParticleHandleBase<float, 3>::addPlasticity<StvkWithHenckyIsotropicUnilateral<float, 3>, DruckerPragerStvkHencky<float>>(StvkWithHenckyIsotropicUnilateral<float, 3> const&, DruckerPragerStvkHencky<float> const&, std::string);
} // namespace ZIRAN
